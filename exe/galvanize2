#!/usr/bin/env ruby

require 'bundler/setup'
require 'chef-dk/cli'
require 'chef-dk/command/generate'
require 'chef-dk/command/generator_commands/habichef'
require 'chef-dk/configurable-patch'

Kernel.trap(:INT) { print("\n"); exit 1 }

ChefDK.commands do |c|
  c.builtin 'foo', :Foo, require_path: 'foo', desc: 'Foo'
end

ChefDK::Command::Generate.generator(:habichef, :HabiChef, 'adsf')

# Chef::Config.chefdk.generator_cookbook = '../../foo/bar'
# Chef::Config.generator_cookbook = '../lib/chef-dk/skeleton/foo'
# ChefDK.generator = '..asdf'
# ChefDK::CLI.generator_cookbook = '..asdf'
# ChefDK.configure do |c|
#   c.generator_cookbook = '../lib/chef-dk/skeleton/foo'
# end

# class Chef::Config
#   default(:generator_cookbook, File.expand_path("../skeletons/code_generator", __FILE__))
# end

chefdk = ChefDK::CLI.new(ARGV.clone)
# chefdk.generator_cookbook = '../'
require 'pp'
# pp chefdk

chefdk.run

__END__
require 'chef-dk/command/generator_commands/base'
module ChefDK
  module Command
    class Generate
      generator(:asdfasfsdad, :Foo, 'asdfsadf')
    end
    module GeneratorCommands
      class Foo < Base
        def run
          puts "I'm running!!!"
        end
      end
    end
  end
end

